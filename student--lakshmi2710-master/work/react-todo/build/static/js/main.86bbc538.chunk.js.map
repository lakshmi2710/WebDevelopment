{"version":3,"sources":["spinner.svg","services.js","Components/Login.jsx","Components/Logout.jsx","Components/TaskList.jsx","Components/ToDoListPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","fetchPutTask","username","taskid","taskName","taskStatus","fetch","method","headers","Headers","body","JSON","stringify","catch","Promise","reject","code","then","response","ok","json","result","Login","onLogin","useState","newLoginUser","setNewLoginUser","isLoading","setIsLoading","error","setError","id","className","name","type","onChange","event","target","value","alt","src","spinner","onClick","userInfo","data","err","message","Logout","user","onLogout","isLoggedIn","TaskList","taskList","userinfo","changeState","setChangeState","sortBy","setSortBy","filterState","setFilterState","Object","keys","length","updateTask","classList","contains","test","changeTask","triggerSort","tasks","sort","a","b","localeCompare","filter","map","eachTask","taskId","stateRefresh","getTaskList","setTaskList","fetchTaskList","ToDoListPage","taskText","setTask","theme","setTheme","cssTheme","setThemeCSS","useEffect","getTheme","setThemeClassName","themeValue","currrentTheme","fetchPutTheme","newTask","App","pageBody","userState","setUserState","setUsername","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.86bbc538.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.05360875.svg\";","export const fetchLogIn = (username) => {\n    return fetch('/session', {\n            method: 'POST',\n            headers: new Headers({\n                'content-type': 'application/json',\n            }),\n            body: JSON.stringify({\n                username\n            }),\n        })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n  };\n  \n  export const fetchLoginStatus = () => {\n    return fetch('/session', {\n            method: 'GET',\n        })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return Promise.reject({\n                    code: 'login-invalid'\n                });\n            }\n            return response.json();\n        });\n  };\n  \n \n  \n  export const fetchLogOut = () => {\n    return fetch('/session', {\n            method: 'DELETE'\n        })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n  };\n  \n  export const fetchTaskList = (username) => {\n    return fetch(`/tasks/${username}`, {\n            method: 'GET',\n        })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n  \n  };\n  \n  export const fetchPostTask = (username, newTask) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({\n            \"task\": {\"taskName\": newTask, \"taskStatus\": \"NotDone\"}\n        }),\n    })\n    .catch(() => {\n        return Promise.reject({\n            code: 'network-error'\n        });\n    })\n    .then((response) => {\n        if (!response.ok) {\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\n    export const fetchPutTask = (username, taskid, taskName, taskStatus) => {\n        return fetch(`/tasks/${username}/${taskid}`, {\n            method: 'PUT',\n            headers: new Headers({\n                'content-type': 'application/json',\n            }),\n            body: JSON.stringify({\n                \"task\": {\"taskName\": taskName, \"taskStatus\": taskStatus}\n            }),\n        })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n    };\n\n    export const fetchDeleteTask = (username, taskid) => {\n        return fetch(`/tasks/${username}/${taskid}`, {\n            method: 'DELETE'\n        })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n  };\n\n  export const fetchGetTheme = (username) => {\n    return fetch(`/theme/${username}`, {\n        method: 'GET'\n    })\n    .catch(() => {\n        return Promise.reject({\n            code: 'network-error'\n        });\n    })\n    .then((response) => {\n        if (!response.ok) {\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchPutTheme = (username,theme) => {\n    return fetch(`/theme/${username}`, {\n        method: 'PUT',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({\n           theme\n        }),\n    })\n    \n    .catch(() => {\n        return Promise.reject({\n            code: 'network-error'\n        });\n    })\n    .then((response) => {\n        if (!response.ok) {\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n};","import React, { useState } from 'react';\nimport { fetchLogIn } from '../services';\nimport spinner from '../spinner.svg';\n\nconst Login = ({ onLogin}) => {\n\n    const [newLoginUser, setNewLoginUser] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const onInput = (event) => {\n        setNewLoginUser(event.target.value);\n    }\n\n    const loginCreateUser = () => {\n\n        fetchLogIn(newLoginUser)\n        .then( (userInfo) => {\n            onLogin(userInfo.data.username);\n            setIsLoading(false); \n          })\n        .catch( (err) => {\n            setError(err.message);\n            setIsLoading(false);\n          });\n      }\n    \n\n    return (\n        <div id=\"login-page\">\n        <div className=\"title\">\n            Welcome to Login Page\n        </div>\n        <div className=\"login-panel\">\n            <h2>Please Enter UserName</h2>\n            <input className=\"username\" name=\"text\" type=\"text\" \n            onChange={onInput}\n            value={newLoginUser} \n            />\n             { isLoading ?\n               <img alt=\"spinner\" src={spinner}/> :\n               <button className=\"create\" type=\"button\" onClick={loginCreateUser} >Login</button>\n             }\n           <div className=\"status\">\n            {error}\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default Login;","import React from 'react';\n\nimport { fetchLogOut } from '../services';\n\nconst Logout = ({ user, onLogout }) => {\n  const onlogout = () => {\n    fetchLogOut()\n    .then( () => onLogout() );\n  };\n  return (\n    <ul >\n       { user.isLoggedIn &&\n    <div>\n            <button className=\"logout\" type=\"button\"\n            onClick={ onlogout }>Logout</button>\n    </div>\n  }\n    \n    </ul>\n  );\n};\n\nexport default Logout;\n","import React, { useState } from 'react'\nimport { fetchPutTask } from '../services'\n\nfunction TaskList({ taskList, userinfo }) {\n    const [changeState, setChangeState] = useState(true)\n    const [sortBy, setSortBy] = useState('')\n    const [filterState, setFilterState] = useState('All')\n    const [error, setError] = useState('')\n\n    if (Object.keys(taskList).length === 0) {\n        return \"\";\n    }\n    if (Object.keys(taskList.data).length === 0) {\n        return \"\";\n    }\n\n    function updateTask(event) {\n        if (event.target.classList.contains(\"update-status\")) {\n            return;\n        }\n\n        if (event.target.classList.contains(\"delete-btn\")) {\n            fetchPutTask(userinfo.username, event.target.id)\n                .then(() => {\n                })\n                .catch((err) => {\n                    setError(err.message);\n                });\n        }\n        if (event.target.classList.contains(\"update\")) {\n            if (/\\S/.test(taskList.data[event.target.id].taskName)) {\n                fetchPutTask(userinfo.username, event.target.id, taskList.data[event.target.id].taskName, taskList.data[event.target.id].taskStatus)\n                    .then(() => {\n                    })\n                    .catch((err) => {\n                        setError(err.message);\n                    });\n            }\n        }\n    }\n\n    function changeTask(event) {\n        if (event.target.classList.contains(\"update-text\")) {\n            taskList.data[event.target.id].taskName = event.target.value;\n        }\n\n        if (event.target.classList.contains(\"update-status\")) {\n            taskList.data[event.target.id].taskStatus = event.target.value;\n        }\n        setSortBy('');\n        setChangeState(!changeState)\n    }\n\n\n    function customSort(a, b) {\n        if (sortBy === \"\" || typeof taskList.data[a].taskName === 'undefined' || typeof taskList.data[b].taskName === 'undefined') {\n            return\n        }\n        if (sortBy === \"taskNameInc\") {\n            return taskList.data[a].taskName.localeCompare(taskList.data[b].taskName)\n        }\n        if (sortBy === \"taskNameDec\") {\n            return taskList.data[b].taskName.localeCompare(taskList.data[a].taskName)\n        }\n        if (sortBy === \"taskStatusInc\") {\n            return taskList.data[a].taskStatus.localeCompare(taskList.data[b].taskStatus)\n        }\n        if (sortBy === \"taskStatusDec\") {\n            return taskList.data[b].taskStatus.localeCompare(taskList.data[a].taskStatus)\n        }\n        return\n    }\n\n    function triggerSort(event) {\n        if (event.target.classList.contains(\"btn-sort-taskname\")) {\n            if (sortBy === 'taskNameDec' || sortBy === '') {\n                setSortBy('taskNameInc')\n            }\n            else {\n                setSortBy('taskNameDec')\n            }\n\n        }\n        if (event.target.classList.contains(\"btn-sort-taskstatus\")) {\n            if (sortBy === 'taskStatusDec' || sortBy === '') {\n                setSortBy('taskStatusInc')\n            }\n            else {\n                setSortBy('taskStatusDec')\n            }\n        }\n        setChangeState(!changeState);\n    }\n\n    function filterTaskStatus(event) {\n        setFilterState(event.target.value);\n    }\n\n    const tasks = Object.keys(taskList.data)\n        .sort(customSort)\n        .filter(taskid => (typeof taskList.data[taskid].taskName !== \"undefined\"\n            && (filterState === \"All\" || taskList.data[taskid].taskStatus === filterState))\n        )\n        .map((eachTask) =>\n            <div id={taskList.data[eachTask].taskId} onClick={updateTask} onChange={changeTask} stateRefresh={changeState}>\n                <div className=\"item\">\n                    <div>\n\n                        <input id={taskList.data[eachTask].taskId} className=\"update-text\" name=\"name\" type=\"text\" value={taskList.data[eachTask].taskName} />\n\n\n                        <select id={taskList.data[eachTask].taskId} className=\"update-status\" value={taskList.data[eachTask].taskStatus}>\n                            <option value={\"Done\"}>Done</option>\n                            <option value={\"NotDone\"}>NotDone</option>\n                        </select>\n\n\n                        <button id={taskList.data[eachTask].taskId} className=\"update\" type=\"button\" name=\"button\" >update</button>\n                        <button id={taskList.data[eachTask].taskId} className=\"delete-btn\" type=\"button\" name=\"button\">x</button>\n                    </div>\n\n                </div>\n            </div>\n        );\n\n    return (\n        <div>\n            <div>\n                <h3>Filter by Status</h3>\n                <select id=\"theme\" className=\"filter-status\" onChange={filterTaskStatus}>\n                    <option value=\"All\">All</option>\n                    <option value=\"Done\">Done</option>\n                    <option value=\"NotDone\">NotDone</option>\n                </select>\n            </div>\n\n            <div className=\"tasks\">\n                <h1>Task List</h1>\n                <ul>\n                    <button className=\"btn-sort-taskname\" type=\"button\" onClick={triggerSort} >Sort Task Name\n                     </button>\n                    <button className=\"btn-sort-taskstatus\" type=\"button\" onClick={triggerSort} >Sort Task Status\n                     </button>\n                    {tasks}\n                </ul>\n\n            </div>\n            <div className=\"status\">\n                {error}\n            </div>\n\n        </div>\n\n    )\n\n}\n\nexport default TaskList;","import React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList';\nimport { fetchTaskList, fetchPostTask, fetchPutTheme, fetchGetTheme } from '../services'\n\n\nconst getTaskList = (setTaskList, setError, username) => {\n  fetchTaskList(username)\n    .then((taskList) => {\n      setTaskList(taskList)\n\n    })\n    .catch((err) => {\n      setError(err.message);\n    });\n}\n\nconst ToDoListPage = (userinfo) => {\n\n  const [taskList, setTaskList] = useState([]);\n  const [taskText, setTask] = useState([]);\n  const [error, setError] = useState('');\n  const [theme, setTheme] = useState('Light');\n  const [cssTheme, setThemeCSS] = useState('');\n\n  const addTask = () => {\n\n    if (/\\S/.test(taskText)) {\n      setError(\"\")\n      fetchPostTask(userinfo.username, taskText)\n        .then(() => {\n          setTask('')\n\n        })\n        .catch((err) => {\n          setError(err.message);\n        });\n    }\n    else {\n      setError(\"Please Enter valid task\")\n    }\n  }\n\n  const onInput = (event) => {\n    setTask(event.target.value);\n  }\n\n  const onRefresh = () => {\n    getTaskList(setTaskList, setError, userinfo.username);\n    getTheme(theme);\n    setThemeClassName(theme);\n    setError(\"\")\n  }\n\n  useEffect(() => {\n    if (userinfo.username) {\n\n      getTaskList(setTaskList, setError, userinfo.username);\n      getTheme();\n      setThemeClassName(theme);\n      setError(\"\")\n    }\n  }, [userinfo.username]);\n\n  const changeTheme = (event) => {\n    let currrentTheme = event.target.value;\n    setTheme(currrentTheme);\n    \n    fetchPutTheme(userinfo.username, currrentTheme)\n      .then(() => {\n        setThemeClassName(currrentTheme);\n      })\n      .catch((err) => {\n        setError(err.message);\n      });\n  }\n\n  const getTheme = () => {\n    fetchGetTheme(userinfo.username)\n      .then((theme) => {\n        setTheme(theme.data)\n      })\n      .catch((err) => {\n        setError(err.message);\n      });\n  }\n\n  const setThemeClassName = (themeValue) => {\n    if (themeValue === 'Light') {\n      setThemeCSS('toDo-panel')\n      return\n    }\n    if (themeValue === 'Dark') {\n      setThemeCSS('toDo-panel-dark')\n      return\n    }\n\n    if (themeValue === 'Colourful') {\n      setThemeCSS('toDo-panel-colourful')\n      return\n    }\n\n  }\n\n\n  return (\n\n    <div id=\"toDo-app\">\n\n      <div className=\"title\">\n        Welcome to Task Tracking Page\n        </div>\n\n      <div className={cssTheme}>\n        {<TaskList taskList={taskList} userinfo={userinfo} />}\n        <div>\n          <button className=\"btn-refresh\" type=\"button\" onClick={onRefresh} >Refresh\n            </button>\n        </div>\n      </div>\n      <div className=\"theme\">\n        <select id=\"theme\" className=\"theme-select\" onChange={changeTheme} value={theme}>\n          <option value=\"Light\">Light</option>\n          <option value=\"Dark\">Dark</option>\n          <option value=\"Colourful\">Colourful</option>\n        </select>\n      </div>\n\n      <div>\n        <div className=\"outgoing\">\n          <input className=\"task\" name=\"text\" type=\"text\" onChange={onInput} value={taskText} />\n\n          <button className=\"btn-task\" type=\"button\" onClick={addTask}>Add Task\n            </button>\n\n          <div className=\"status\">\n            {error}\n          </div>\n\n        </div>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default ToDoListPage;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Login from './Components/Login'\nimport Logout from './Components/Logout'\nimport ToDoListPage from './Components/ToDoListPage'\n\nimport { fetchLoginStatus} from './services'\n\n\nfunction App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false });\n  const [username, setUsername] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect( () => {\n    fetchLoginStatus()\n    .then( userinfo => {\n      \n      setUserState({\n        isLoggedIn: true\n      });\n      setUsername( userinfo.data.username);\n    })\n    .catch( (err) => {\n      setError(err.error);\n      setUserState({\n        isLoggedIn: false\n      })\n  \n    });\n\n  }, []);\n\n  const login = (username) => {\n    setUserState({\n      isLoggedIn: true,\n    });\n    setUsername(username);\n  };\n\n  const logout = () => {\n    setUserState({\n      isLoggedIn: false\n    });\n    \n  };\n\n  let pageBody;\n  if(userState.isLoggedIn){\n    pageBody = <ToDoListPage username={ username }/>;\n  }\n  else{\n    pageBody = <Login onLogin={ login }/>;\n  }\n\n  return (\n    <div className=\"App\">\n      <Logout user={userState} onLogout={ logout }/>\n      {pageBody}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}