{"version":3,"sources":["img/img5.jpg","img/img2.jpg","img/img10.jpg","img/img9.jpg","img/img12.jpg","img/img11.jpg","img/img7.jpg","services.js","Components/Login.jsx","Components/WelcomePage.jsx","Components/Logout.jsx","Components/HealthTipPage.jsx","Components/ChatMessages.jsx","Components/MessageSend.jsx","Components/ChatPage.jsx","Components/PatientPortal.jsx","Components/DoctorPortal.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","fetchGetTips","fetch","method","catch","Promise","reject","code","then","response","ok","json","result","fetchDeleteChatRoom","Login","user","onLogin","useState","newLoginUser","setNewLoginUser","error","setError","className","src","DoctorLoginImg","alt","class","PatientLoginImg","name","type","onChange","event","target","value","toUpperCase","onClick","username","headers","Headers","body","JSON","stringify","userInfo","err","WelcomePage","User","setUser","isStarted","setStarted","welcomeImg","Logout","onLogout","isLoggedIn","HealthTipPage","tipsList","callBackFromTips","tips","Object","values","map","tip","doctorName","healthTip","ChatMsssages","messagelist","keys","length","chatList","chats","message","timestamp","MessageSend","getTextMessage","GetchatList","setMessageList","newMessage","setNewMEssage","ChatPage","callBackFromChats","messages","useEffect","intervalId","setInterval","clearInterval","id","newMEssage","msg","ChatMessages","PatientPortal","setViewHealthTip","setHealthTips","chatPageRender","setChatPageRender","ClientMsg","setClientMsg","getChatRoomId","goToChatPage","getHealthTips","healthTips","data","chatRoomId","DoctorPortal","newTip","setNewTip","PatientList","setPatientList","setChatRoomId","clientError","setclientError","patientslist","patientList","patients","patient","textValue","fetchSendTip","App","pageBody","userState","setUserState","userName","setUserName","userType","setUserType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.0c4e251d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img5.32c02084.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img2.3244e30d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img10.f9389f33.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img9.30e01b99.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img12.2d8485db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img11.9e8dbacf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img7.ffb1d223.jpg\";","export const fetchPatientLogIn = (username) => {\n    return fetch('/sessionPatient', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({\n            username\n        }),\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\nexport const fetchDoctorLogIn = (username) => {\n    return fetch('/sessionDoctor', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({\n            username\n        }),\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\nexport const fetchLoginStatus = () => {\n    return fetch('/session', {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return Promise.reject({\n                    code: 'login-invalid'\n                });\n            }\n            return response.json();\n        });\n};\n\n\nexport const fetchLogOut = () => {\n    return fetch('/session', {\n        method: 'DELETE'\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\nexport const fetchSendTip = (healthTip) => {\n    return fetch('/tips', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({\n            healthTip\n        }),\n    })\n        .catch(() => Promise.reject({\n            error: 'network-error'\n        }))\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n\n};\n\nexport const fetchGetTips = () => {\n    return fetch('/tips', {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n\n};\n\nexport const fetchGetAvailablePatients = () => {\n    return fetch('/availablePatients', {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n\n};\n\nexport const fetchSendMessage = (msg) => {\n    return fetch(`/message`, {\n        method: 'POST',\n        body: JSON.stringify({\n            'message': msg\n        }),\n        headers: new Headers({\n            'content-type': 'application/json'\n        })\n    })\n        .catch(() => Promise.reject({\n            error: 'network-error'\n        }))\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\nexport const fetchGetChats = () => {\n    return fetch('/message', {\n        method: 'GET',\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n\n};\n\nexport const fetchGetChatRoomId = () => {\n    return fetch('/chatRoomId', {\n        method: 'GET',\n    })\n    .catch(() => {\n        return Promise.reject({\n            code: 'network-error'\n        });\n    })\n    .then((response) => {\n        if (!response.ok) {\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n\n};\n\nexport const fetchSetChatRoomId = () => {\n    return fetch('/chatRoomId', {\n        method: 'POST',\n    })\n    .catch(() => {\n        return Promise.reject({\n            code: 'network-error'\n        });\n    })\n    .then((response) => {\n        if (!response.ok) {\n            return response.json().then(result => Promise.reject(result));\n        }\n        return response.json();\n    });\n\n};\n\nexport const fetchPostAvailablePatient = () => {\n    return fetch(`/availablePatients`, {\n        method: 'POST',\n        body: JSON.stringify({}),\n        headers: new Headers({\n            'content-type': 'application/json'\n        })\n    })\n        .catch(() => Promise.reject({\n            error: 'network-error'\n        }))\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\n\nexport const fetchDeleteChatRoom = () => {\n    return fetch('/chatRoomId', {\n        method: 'DELETE'\n    })\n        .catch(() => {\n            return Promise.reject({\n                code: 'network-error'\n            });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};","import React, { useState } from 'react';\nimport { fetchDoctorLogIn, fetchPatientLogIn } from '../services';\nimport DoctorLoginImg from '../img/img2.jpg'\nimport PatientLoginImg from '../img/img10.jpg'\n\n\nconst Login = ({ user, onLogin }) => {\n\n  const [newLoginUser, setNewLoginUser] = useState('');\n  const [error, setError] = useState('');\n\n  const onInput = (event) => {\n    const name = event.target.value\n    setNewLoginUser(name.toUpperCase());\n  }\n\n  const loginCreatePatient = () => {\n    fetchPatientLogIn(newLoginUser)\n      .then((userInfo) => {\n        onLogin(userInfo);\n\n      })\n      .catch((err) => {\n        setError(err.error);\n\n      });\n  }\n\n  const loginCreateDoctor = () => {\n    fetchDoctorLogIn(newLoginUser)\n      .then((userInfo) => {\n        onLogin(userInfo);\n      })\n      .catch((err) => {\n        setError(err.error);\n\n      });\n  }\n\n  return (\n    <div className='bg'>\n      {user === \"Doctor\" ?\n        <img src={DoctorLoginImg} alt=\"bg\" class=\"bg\" /> :\n        <img src={PatientLoginImg} alt=\"bg\" class=\"bg\" />\n      }\n      <div className=\"title\">\n        {user === \"Doctor\" ?\n          \"Welcome Doctor, Please Login with your details\" :\n          \"Welcome, Please Login with your details! We are always here to help you\"\n        }\n      </div>\n      <div className=\"heading\">\n        Please Enter UserName\n      </div>\n        <input className=\"username\" name=\"text\" type=\"text\"\n          onChange={onInput}\n          value={newLoginUser}\n        />\n        {user === \"Doctor\" ?\n          <button className=\"create\" type=\"button\" onClick={loginCreateDoctor} >Login</button>\n          :\n          <button className=\"create\" type=\"button\" onClick={loginCreatePatient} >Login</button>\n        }\n        <div className=\"status\">\n          {error}\n        </div>\n    </div>\n\n  )\n}\n\n\nexport default Login;","import React, { useState } from 'react';\nimport welcomeImg from '../img/img5.jpg'\nimport Login from './Login'\n\nconst WelcomePage = ({ onLogin }) => {\n    const [User, setUser] = useState('');\n    const [isStarted, setStarted] = useState(false);\n\n    const CallDoctorLogin = () => {\n        setStarted(true)\n        setUser('Doctor')\n    }\n\n    const CallPatientLogin = () => {\n        setStarted(true)\n        setUser('Patient')\n    }\n\n    const calSetSatart = () => {\n        setStarted(false);\n    }\n\n    return (\n        <div>\n            {isStarted ?\n                <div>\n                    <button className=\"btn-home\" type=\"button\" onClick={calSetSatart}>Home</button>\n                    <Login user={User} onLogin={onLogin} />\n                </div>\n                :\n                <div className='bg'>\n                    <img src={welcomeImg} alt=\"bg\" class=\"bg\" />\n                    <div className=\"title\">\n                        Welcome to Health Care Center\n                    </div>\n                    <div className=\"sub_title\">\n                        Get Started\n                    </div>\n                    <div className='btn-starters'>\n                        <button className=\"btn-start-doctor\" type=\"button\" onClick={CallDoctorLogin}>Doctor</button>\n                        <div className=\"divider\" />\n                        <button className=\"btn-start-patient\" type=\"button\" onClick={CallPatientLogin}>Patient</button>\n                    </div>\n                </div>\n            }\n\n        </div>\n\n    );\n};\n\nexport default WelcomePage;\n","import React from 'react';\n\nimport { fetchLogOut } from '../services';\n\nconst Logout = ({ user, onLogout }) => {\n\n  const onlogout = () => {\n    fetchLogOut()\n      .then(() => onLogout());\n  };\n  return (\n    <ul >\n      {user.isLoggedIn ?\n        <div>\n          <button className=\"btn-logout\" type=\"button\" onClick={onlogout}>Logout</button>\n        </div> : \"\"}\n    </ul>\n  );\n};\n\nexport default Logout;\n","import React from 'react';\nimport welcomeImg from '../img/img12.jpg'\n\nconst HealthTipPage = ({ tipsList, callBackFromTips }) => {\n\n  const tips = Object.values(tipsList).map((tip) =>\n    <div className=\"tip\">{tip.doctorName} : {tip.healthTip}</div>)\n\n  const callBack = () => {\n    callBackFromTips();\n  }\n\n  return (\n    <div className='bg'>\n      <img src={welcomeImg} alt=\"bg\" class=\"bg\" />\n      <button className=\"btn-main\" type=\"button\" onClick={callBack}>Main Page</button>\n      <div className=\"title\">\n        Health Tips By Doctors\n      </div>\n        <div className=\"tip-list\">\n            {tips}\n        </div>\n    </div>\n  );\n};\n\nexport default HealthTipPage;","import React from 'react'\n\nfunction ChatMsssages({ messagelist }) {\n    if (Object.keys(messagelist).length === 0) {\n        return (\n            <div className=\"messages\">\n                <h3>Messages</h3>\n            </div>\n        );\n    }\n    const chatList = messagelist.chats.map((message) =>\n        <p>{message.timestamp} {message.username}: {message.message}</p>)\n\n    return (\n        <div className=\"messages\">\n            <h3>Messages</h3>\n            <ul className=\"message-list\">  \n                {chatList}\n            </ul>\n        </div>\n    )\n}\n\nexport default ChatMsssages;","import React, { useState } from 'react'\n\nfunction MessageSend({ getTextMessage, GetchatList, setMessageList, error, setError }) {\n\n    const [newMessage, setNewMEssage] = useState('');\n\n    const onInput = (event) => {\n        setNewMEssage(event.target.value);\n    }\n\n    const sendMessage = () => {\n        getTextMessage(newMessage);\n        setNewMEssage('')\n        setError('');\n        GetchatList({ setMessageList });\n    }\n\n    return (\n        <div className=\"outgoing\">\n            <input className=\"message\" name=\"text\" type=\"text\" onChange={onInput} value={newMessage} />\n            <button className=\"btn-msg\" type=\"button\" onClick={sendMessage}>Send</button>\n            <div className=\"status\">\n                {error}\n            </div>\n        </div>\n    )\n}\n\nexport default MessageSend;","import React, { useState, useEffect } from 'react';\nimport { fetchGetChats } from '../services'\nimport ChatMessages from './ChatMessages'\nimport MessageSend from './MessageSend'\nimport { fetchSendMessage } from '../services'\nimport welcomeImg from '../img/img11.jpg'\n\nconst ChatPage = ({ callBackFromChats }) => {\n  const [messagelist, setMessageList] = useState([]);\n  const [error, setError] = useState('');\n  const REFRESH_TIME_IN_MS = 3000;\n\n  const GetchatList = ({ setMessageList, setError }) => {\n    fetchGetChats()\n      .then(messages => {\n        setMessageList(messages);\n      })\n      .catch(err => {\n        setError(err.error);\n      });\n  };\n\n  const getTextMessage = (newMEssage) => {\n    fetchSendMessage(newMEssage)\n      .then(() => {\n      })\n      .catch((err) => {\n        setError(err.error);\n      });\n  }\n\n  const callBack = () => {\n    callBackFromChats();\n  }\n\n  useEffect(() => {\n   \n    GetchatList({ setMessageList, setError });\n    const intervalId = setInterval(() => {\n      GetchatList({ setMessageList, setError });\n    }, REFRESH_TIME_IN_MS);\n    return function cleanup() {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n\n  return (\n    <div id=\"chat-app\">\n      <div className=\"title\">\n        Welcome To The Chat Room!\n      </div>\n      <div className='bg'>\n        <img src={welcomeImg} alt=\"bg\" class=\"bg\" />\n        <button className=\"btn-main\" type=\"button\" onClick={callBack}>Quit Chat</button>\n\n        {<MessageSend getTextMessage={getTextMessage} GetchatList={GetchatList} setMessageList={setMessageList} error={error} setError={setError} />}\n        \n        <div className=\"chat-panel\">\n          {<ChatMessages messagelist={messagelist} />}\n        </div>\n        \n      </div>\n    </div>\n  )\n}\n\nexport default ChatPage;","import React, { useState, useEffect } from 'react';\nimport { fetchGetTips, fetchPostAvailablePatient, fetchGetChatRoomId, fetchDeleteChatRoom } from '../services'\nimport welcomeImg from '../img/img9.jpg'\nimport HealthTipPage from './HealthTipPage'\nimport ChatPage from './ChatPage'\n\nconst PatientPortal = () => {\n\n    const [error, setError] = useState('');\n    const [healthTip, setViewHealthTip] = useState(false);\n    const [tipsList, setHealthTips] = useState('');\n    const [chatPageRender, setChatPageRender] = useState(false);\n    const [ClientMsg, setClientMsg] = useState(\"\")\n    const REFRESH_TIME_IN_MS = 3000;\n\n\n    useEffect(() => {\n        getChatRoomId();\n        const intervalId = setInterval(() => {\n            getChatRoomId();\n            if (chatPageRender == true) {\n                goToChatPage()\n\n            }\n\n        }, REFRESH_TIME_IN_MS);\n        return function cleanup() {\n            clearInterval(intervalId);\n        };\n    }, []);\n\n    const goToHealthTipPage = () => {\n        getHealthTips();\n        setViewHealthTip(true)\n    }\n\n    const getHealthTips = () => {\n\n        fetchGetTips()\n            .then((healthTips) => {\n                setHealthTips(healthTips);\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n    }\n\n    const getChatRoomId = () => {\n\n        fetchGetChatRoomId()\n            .then((data) => {\n                if (Object.keys(data).length == 0) {\n                    setChatPageRender(false);\n                    return;\n                }\n                setChatPageRender(true);\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n    }\n\n    const goToChatPage = () => {\n        setClientMsg(\"Waiting for Doctor, thanks for your patience\")\n        fetchPostAvailablePatient()\n            .then((data) => {\n                if (data.chatRoomId) {\n                    setChatPageRender(true);\n                }\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n    }\n\n    const callBackFromTips = () => {\n        \n        setViewHealthTip(false);\n        setChatPageRender(false);\n    }\n\n    const callBackFromChats = () => {\n        setClientMsg(\"\");\n        fetchDeleteChatRoom()\n            .then(() => {\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n        setViewHealthTip(false);\n        setChatPageRender(false);\n    }\n\n\n    return (\n        <div>\n            {healthTip ?\n                <HealthTipPage tipsList={tipsList} callBackFromTips={callBackFromTips} /> :\n                (chatPageRender ? <ChatPage callBackFromChats={callBackFromChats} /> :\n                <div>\n                    <div className=\"title\">\n                        Welcome To Health Care Center, Feel free to connect with Doctors\n                    </div>\n                        <div className='bg'>\n                            <img src={welcomeImg} alt=\"bg\" class=\"bg\" />\n                            <div className=\"divider\"/>\n                            <div>\n                                <button className=\"btn-view-tip\" type=\"button\" onClick={goToChatPage} >Request chat appointment with Doctor</button>\n                            </div>\n                            <div className=\"status\">\n                                {ClientMsg}\n                            </div>\n                            <div className=\"divider\"/>\n                            <div >\n                                <button className=\"btn-view-tip\" type=\"button\" onClick={goToHealthTipPage}>View Health Tips</button>\n                            </div>\n                        </div>\n                        <div className=\"status\">\n                            {error}\n                        </div>\n                </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default PatientPortal;","import React, { useState, useEffect } from 'react';\nimport { fetchGetTips, fetchSendTip, fetchGetAvailablePatients, fetchDeleteChatRoom, fetchSetChatRoomId } from '../services'\nimport welcomeImg from '../img/img7.jpg'\nimport HealthTipPage from './HealthTipPage'\nimport ChatPage from './ChatPage'\n\n\nconst DoctorPortal = () => {\n\n    const [newTip, setNewTip] = useState('');\n    const [error, setError] = useState('');\n    const [healthTip, setViewHealthTip] = useState(false)\n    const [tipsList, setHealthTips] = useState('');\n    const [PatientList, setPatientList] = useState('')\n    const [chatPageRender, setChatPageRender] = useState(false);\n    const [chatRoomId, setChatRoomId] = useState(0);\n    const [clientError, setclientError] = useState(\"\");\n    const REFRESH_TIME_IN_MS = 3000;\n\n\n    const onInput = (event) => {\n        const textValue = event.target.value\n        setNewTip(textValue);\n    }\n\n    const sendHealthTip = () => {\n        fetchSendTip(newTip)\n            .then(() => {\n                setNewTip(\"\");\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n    }\n\n    const goToHealthTipPage = () => {\n        getHealthTips();\n        setViewHealthTip(true)\n    }\n\n    const getHealthTips = () => {\n        fetchGetTips()\n            .then((healthTips) => {\n                setHealthTips(healthTips);\n                setError(\"\")\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n    }\n\n    const patientslist = () => {\n        fetchGetAvailablePatients()\n            .then((patientList) => {\n                setclientError(\"\");\n                setPatientList(patientList);\n                \n            })\n            .catch((err) => {\n                setclientError(err.error);\n                setPatientList('');\n            });\n    }\n\n    const callBackFromTips = () => {\n        setError(\"\")\n        setViewHealthTip(false)\n        setChatPageRender(false);\n    }\n\n    const callBackFromChats = () => {\n        setError(\"\")\n        fetchDeleteChatRoom()\n            .then(() => {\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n        setViewHealthTip(false);\n        setChatPageRender(false);\n    }\n\n    const goToChatPage = () => {\n        fetchSetChatRoomId()\n            .then((data) => {\n                if (Object.keys(data).length == 0) {\n                    setChatPageRender(false);\n                    return;\n                }\n                setChatRoomId(data.chatRoomId);\n                setChatPageRender(true);\n            })\n            .catch((err) => {\n                setError(err.error);\n            });\n    }\n\n    useEffect(() => {\n        patientslist();\n        const intervalId = setInterval(() => {\n            patientslist();\n        }, REFRESH_TIME_IN_MS);\n        return function cleanup() {\n            clearInterval(intervalId);\n        };\n    }, []);\n\n    const patients = Object.values(PatientList).map((patient) =>\n        <div>\n            <button className=\"btn-patient\" type=\"button\" name=\"button\" >{patient.name}</button>\n        </div>\n    )\n\n    return (\n        <div>\n            {healthTip ?\n                <HealthTipPage tipsList={tipsList} callBackFromTips={callBackFromTips} /> :\n                (chatPageRender ? <ChatPage callBackFromChats={callBackFromChats} /> :\n                <div>\n                    <div className=\"title\">\n                        Welcome Doctor\n                    </div>\n                    <div className='bg'>\n                            <img src={welcomeImg} alt=\"bg\" class=\"bg\" />\n                            <div className=\"patients\">\n                            <div className=\"heading\">\n                               Waiting Patients\n                            </div>\n                                <ul className=\"patient-list\">\n                                    {patients}\n                                </ul>\n                                <div className=\"status\">\n                                    {clientError}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div>\n                            <button className=\"btn-view-tip\" type=\"button\" onClick={goToChatPage}>Go To Chat Room</button>\n                        </div>\n\n                        <div className='title-tip'>\n                            Add Health Tip\n                        </div>\n                            <div className=\"\">\n                                <textarea className=\"tip-text\" name=\"text\" type=\"text\" onChange={onInput} value={newTip} />\n                                <div>\n                                    <button className=\"btn-tip\" type=\"button\" onClick={sendHealthTip}>Add Tip</button>\n                                </div>\n                            </div>\n                            <div className=\"divider\"></div>\n                            <div>\n                                <button className=\"btn-view-tip\" type=\"button\" onClick={goToHealthTipPage}>View Health Tips</button>\n                            </div>\n                            <div className=\"status\">\n                                {error}\n                            </div>\n                        \n                </div>\n                   \n                )\n            }\n        </div>\n    )\n}\n\nexport default DoctorPortal;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport WelcomePage from './Components/WelcomePage'\nimport Logout from './Components/Logout'\nimport PatientPortal from './Components/PatientPortal'\nimport DoctorPortal from './Components/DoctorPortal'\nimport { fetchLoginStatus } from './services'\n\nfunction App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false });\n  const [userName, setUserName] = useState('');\n  const [userType, setUserType] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchLoginStatus()\n      .then(userInfo => {\n        setUserState({\n          isLoggedIn: true\n        });\n        setUserName(userInfo.userName);\n        setUserType(userInfo.userType);\n      })\n      .catch((err) => {\n        setError(err.error);\n        setUserState({\n          isLoggedIn: false\n        })\n      });\n  }, []);\n\n  const onLogin = (userInfo) => {\n    setUserState({\n      isLoggedIn: true,\n    });\n    setUserName(userInfo.userName);\n    setUserType(userInfo.userType);\n  };\n\n  const onlogout = () => {\n    setUserState({\n      isLoggedIn: false\n    });\n  };\n\n  let pageBody;\n  if (userState.isLoggedIn && userType == \"patient\") {\n    pageBody = <PatientPortal userName={userName} error={error} />;\n  }\n  else if(userState.isLoggedIn && userType == \"doctor\") {\n    pageBody = <DoctorPortal userName={userName} error={error} />;\n  }\n  else {\n    pageBody = <WelcomePage  onLogin = {onLogin}/>;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Logout user={userState} onLogout={onlogout} />\n      {pageBody}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}